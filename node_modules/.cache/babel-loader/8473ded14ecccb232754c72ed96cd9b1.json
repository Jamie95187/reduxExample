{"ast":null,"code":"import * as actionTypes from './actionTypes';\nexport const saveResult = res => {\n  return {\n    type: actionTypes.STORE_RESULT,\n    result: res\n  };\n};\nexport const storeResult = res => {\n  // We want to simulate that we only store results after 2 seconds of reaching out to a server\n  return (dispatch, getState) => {\n    setTimeout(() => {\n      const oldCounter = getState().counter.counter;\n      console.log(oldCounter);\n      dispatch(saveResult(res));\n    }, 2000);\n  };\n  return {\n    type: actionTypes.STORE_RESULT,\n    result: res\n  };\n};\nexport const deleteResult = resEleId => {\n  return {\n    type: actionTypes.DELETE_RESULT,\n    resultElementId: resEleId\n  };\n};","map":{"version":3,"sources":["/Users/student/Desktop/Udemy-React-Complete-Guide/redux--01-start/src/store/actions/result.js"],"names":["actionTypes","saveResult","res","type","STORE_RESULT","result","storeResult","dispatch","getState","setTimeout","oldCounter","counter","console","log","deleteResult","resEleId","DELETE_RESULT","resultElementId"],"mappings":"AAAA,OAAO,KAAKA,WAAZ,MAA6B,eAA7B;AAEA,OAAO,MAAMC,UAAU,GAAKC,GAAF,IAAW;AACnC,SAAO;AACLC,IAAAA,IAAI,EAAEH,WAAW,CAACI,YADb;AAELC,IAAAA,MAAM,EAAEH;AAFH,GAAP;AAID,CALM;AAOP,OAAO,MAAMI,WAAW,GAAIJ,GAAD,IAAS;AAClC;AACA,SAAO,CAACK,QAAD,EAAWC,QAAX,KAAwB;AAC7BC,IAAAA,UAAU,CAAE,MAAM;AAChB,YAAMC,UAAU,GAAGF,QAAQ,GAAGG,OAAX,CAAmBA,OAAtC;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYH,UAAZ;AACAH,MAAAA,QAAQ,CAACN,UAAU,CAACC,GAAD,CAAX,CAAR;AACD,KAJS,EAIP,IAJO,CAAV;AAKD,GAND;AAOA,SAAO;AACLC,IAAAA,IAAI,EAAEH,WAAW,CAACI,YADb;AAELC,IAAAA,MAAM,EAAEH;AAFH,GAAP;AAID,CAbM;AAeP,OAAO,MAAMY,YAAY,GAAIC,QAAD,IAAc;AACxC,SAAO;AACLZ,IAAAA,IAAI,EAAEH,WAAW,CAACgB,aADb;AAELC,IAAAA,eAAe,EAAEF;AAFZ,GAAP;AAID,CALM","sourcesContent":["import * as actionTypes from './actionTypes';\n\nexport const saveResult = ( res ) => {\n  return {\n    type: actionTypes.STORE_RESULT,\n    result: res\n  }\n}\n\nexport const storeResult = (res) => {\n  // We want to simulate that we only store results after 2 seconds of reaching out to a server\n  return (dispatch, getState) => {\n    setTimeout( () => {\n      const oldCounter = getState().counter.counter;\n      console.log(oldCounter);\n      dispatch(saveResult(res));\n    }, 2000);\n  }\n  return {\n    type: actionTypes.STORE_RESULT,\n    result: res\n  };\n};\n\nexport const deleteResult = (resEleId) => {\n  return {\n    type: actionTypes.DELETE_RESULT,\n    resultElementId: resEleId\n  };\n};\n"]},"metadata":{},"sourceType":"module"}